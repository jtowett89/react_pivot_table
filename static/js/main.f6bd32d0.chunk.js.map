{"version":3,"sources":["components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Table","useState","tableData","setTableData","useEffect","data","className","colSpan","states_array","i","length","push","state","filter","value","index","self","indexOf","sort","a","b","toString","localeCompare","map","key1","getStates","fullData","categories_array","category","sorted_categories_array","display_data","number_of_states","element_cat","num","sub_categories_array","sorted_category_total_per_state","j","subCategory","sorted_sub_categories_array","element_subCat","states_list_array","sub_cat_row_total","k","sorted_states_list_array","x","Math","round","sales","sorted_state_sales_total","current_state","state_sales_total_array","state_sales_sub_cat_total","cat_total_per_state_array","cat_total_per_state","n","y","unshift","subCatRow","single_state_sale_per_sub_category","key2","grand_cat_total","slice","category_grand_total","e","splice","catTotalRow","key4","final_state_array","final_grand_total","sorted_final_states_list_array","new_state","state_grand_total","grand_total_sum","d","grandTotalRow","grand_total_per_state","key","getTableData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6bd32d0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport data from \"../data/Data.json\";\r\n\r\nconst Table = () => {\r\n  const [tableData, setTableData] = useState([]);\r\n  useEffect(() => {\r\n    setTableData(data);\r\n  }, []);\r\n\r\n  let getStates = (data) => {\r\n    let states_array = [];\r\n    for (let i = 0; i < data.length; i++) {\r\n      states_array.push(data[i].state);\r\n    }\r\n    let sorted_states_array = states_array\r\n      .filter((value, index, self) => self.indexOf(value) === index)\r\n      .sort((a, b) => {\r\n        return a.toString().localeCompare(b);\r\n      });\r\n    return sorted_states_array.map((state, key1) => {\r\n      return <th key={key1}>{state}</th>;\r\n    });\r\n  };\r\n\r\n  let getTableData = (data) => {\r\n    let fullData = data;\r\n    let categories_array = [];\r\n    for (let i = 0; i < fullData.length; i++) {\r\n      categories_array.push(fullData[i].category);\r\n    }\r\n    let sorted_categories_array = categories_array\r\n      .filter((value, index, self) => self.indexOf(value) === index)\r\n      .sort((a, b) => {\r\n        return a.toString().localeCompare(b);\r\n      });\r\n    let display_data = [];\r\n    let number_of_states = [];\r\n    for (const element_cat of sorted_categories_array) {\r\n      let num = 0;\r\n      let sub_categories_array = [];\r\n      let category = element_cat;\r\n      let sorted_category_total_per_state = [];\r\n\r\n      for (let j = 0; j < fullData.length; j++) {\r\n        if (fullData[j].category === category) {\r\n          sub_categories_array.push(fullData[j].subCategory);\r\n        }\r\n      }\r\n      let sorted_sub_categories_array = sub_categories_array\r\n        .filter((value, index, self) => self.indexOf(value) === index)\r\n        .sort((a, b) => {\r\n          return a.toString().localeCompare(b);\r\n        });\r\n\r\n      for (const element_subCat of sorted_sub_categories_array) {\r\n        let states_list_array = [];\r\n        let subCategory = element_subCat;\r\n        let sub_cat_row_total = 0;\r\n\r\n        for (let k = 0; k < fullData.length; k++) {\r\n          states_list_array.push(fullData[k].state);\r\n        }\r\n        let sorted_states_list_array = states_list_array\r\n          .filter((value, index, self) => self.indexOf(value) === index)\r\n          .sort((a, b) => {\r\n            return a.toString().localeCompare(b);\r\n          });\r\n        number_of_states = sorted_states_list_array;\r\n        for (let x = 0; x < fullData.length; x++) {\r\n          if (\r\n            fullData[x].category === category &&\r\n            fullData[x].subCategory === subCategory\r\n          ) {\r\n            //sum of category row totals\r\n            sub_cat_row_total =\r\n              sub_cat_row_total + Math.round(fullData[x].sales);\r\n          }\r\n        }\r\n\r\n        let sorted_state_sales_total = [];\r\n\r\n        for (const element_state of sorted_states_list_array) {\r\n          let current_state = element_state;\r\n          let state_sales_total_array = [];\r\n          let state_sales_sub_cat_total = 0;\r\n          let cat_total_per_state_array = [];\r\n          let cat_total_per_state = 0;\r\n\r\n          for (let n = 0; n < fullData.length; n++) {\r\n            if (\r\n              fullData[n].category === category &&\r\n              fullData[n].subCategory === subCategory &&\r\n              fullData[n].state === current_state\r\n            ) {\r\n              //sum of sales per state in category\r\n              state_sales_sub_cat_total =\r\n                state_sales_sub_cat_total + Math.round(fullData[n].sales);\r\n            }\r\n          }\r\n          for (let y = 0; y < fullData.length; y++) {\r\n            if (\r\n              fullData[y].category === category &&\r\n              fullData[y].state === current_state\r\n            ) {\r\n              //sum of category totals per state\r\n              cat_total_per_state =\r\n                cat_total_per_state + Math.round(fullData[y].sales);\r\n            }\r\n          }\r\n          cat_total_per_state_array.push(cat_total_per_state);\r\n          sorted_category_total_per_state.push(cat_total_per_state_array[0]);\r\n\r\n          state_sales_total_array.push(state_sales_sub_cat_total);\r\n          sorted_state_sales_total.push(state_sales_total_array[0]);\r\n        }\r\n\r\n        sorted_state_sales_total.unshift(category, subCategory);\r\n        sorted_state_sales_total.push(sub_cat_row_total);\r\n        let subCatRow = sorted_state_sales_total.map(\r\n          (single_state_sale_per_sub_category, key2) => {\r\n            return <td key={key2}>{single_state_sale_per_sub_category}</td>;\r\n          }\r\n        );\r\n\r\n        display_data.push(<tr>{subCatRow}</tr>);\r\n      }\r\n\r\n      let grand_cat_total = sorted_category_total_per_state.slice(\r\n        0,\r\n        number_of_states.length + 1\r\n      );\r\n      if (num === 0) {\r\n        let category_grand_total = 0;\r\n        for (let e = 0; e < grand_cat_total.length - 1; e++) {\r\n          category_grand_total = category_grand_total + grand_cat_total[e];\r\n        }\r\n        grand_cat_total.splice(\r\n          number_of_states.length,\r\n          1,\r\n          category_grand_total\r\n        );\r\n        num = 1;\r\n      }\r\n\r\n      let catTotalRow = grand_cat_total.map((cat_total_per_state, key4) => {\r\n        return <td key={key4}>{cat_total_per_state}</td>;\r\n      });\r\n      display_data.push(\r\n        <tr className=\"cat-totals\">\r\n          <td>{category} Totals</td>\r\n          <td></td>\r\n          {catTotalRow}\r\n        </tr>\r\n      ); //state totals per category\r\n      num = 0;\r\n    }\r\n\r\n    let final_state_array = [];\r\n    let final_grand_total = [];\r\n    for (let b = 0; b < fullData.length; b++) {\r\n      final_state_array.push(fullData[b].state);\r\n    }\r\n    let sorted_final_states_list_array = final_state_array\r\n      .filter((value, index, self) => self.indexOf(value) === index)\r\n      .sort((a, b) => {\r\n        return a.toString().localeCompare(b);\r\n      });\r\n\r\n    for (const state of sorted_final_states_list_array) {\r\n      let new_state = state;\r\n      let state_grand_total = 0;\r\n      for (let a = 0; a < fullData.length; a++) {\r\n        if (fullData[a].state === new_state) {\r\n          state_grand_total = state_grand_total + Math.round(fullData[a].sales);\r\n        }\r\n      }\r\n\r\n      final_grand_total.push(state_grand_total);\r\n    }\r\n    let grand_total_sum = 0;\r\n\r\n    for (let d = 0; d < final_grand_total.length; d++) {\r\n      grand_total_sum = grand_total_sum + final_grand_total[d];\r\n    }\r\n\r\n    final_grand_total.push(grand_total_sum);\r\n    let grandTotalRow = final_grand_total.map((grand_total_per_state, key) => {\r\n      return <td key={key}>{grand_total_per_state}</td>;\r\n    });\r\n\r\n    display_data.push(\r\n      <tr className=\"top-border\">\r\n        <td>Grand Total</td>\r\n        <td></td>\r\n        {grandTotalRow}\r\n      </tr>\r\n    );\r\n\r\n    return display_data;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className=\"text-center\">React Pivot Table</h1>\r\n      <br />\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th colSpan=\"2\" className=\"text-left text-upper\">\r\n              Products\r\n            </th>\r\n            <th colSpan=\"51\" className=\"text-left text-upper\">\r\n              States\r\n            </th>\r\n          </tr>\r\n        </thead>\r\n        <thead>\r\n          <tr>\r\n            <th>Category</th>\r\n            <th>Sub-Category</th>\r\n            {getStates(tableData)}\r\n            <th className=\"text-left text-upper\">Grand Total</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>{getTableData(tableData)}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import \"./App.css\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return <Table />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}